Version Control:GIT instead of FTP

<p>In my last post I mentioned using git to copy files to my hosting server. Git is a form of version control which allows you to track changes to files as you make them. Version control is great because it allows multiple people to work on a coding project without missing or overwriting another persons changes. Even working on individual projects I will store them in a git repository because I like to track my changes and it's great practice for bigger project when you need to use more difficult git commands. <a href="https://github.com/">Github</a> is an absolutely incredible version control tool that allows you to store your git repositories FOR FREE, visualize your git repositories, add contributors, review code and open issues. There's also a social community of open source coder on github and it's a great place to look at other people's code to learn, clone their projects for personal use and even contribute back to these open source repositories. All-in-all git+github is a great combination for version control.<p>

<p>Now you may be asking, "How does version control relate to copying files to my web hosting"? One of the git commands is "git clone" which allows you to clone (copy) your repository to any location. Github has a widget in the bottom right of every repository showing you the command to clone your repository based on which method you choose to do so. Once your repository is cloned to your hosting server, you can make your changes from your personal computer, check them into github using git and pull down your changes to hosting service. The all important git commands are:</p>
<pre>
	git status
	git pull
	git add [file]
	git add *
	git commit -m "[message]"
	git push -u origin [branch]
</pre>
<p>"git status" allows you to check the current status of your repository meaning which files have been added, removed, changed and which are staged for commit. "git pull" checks your remote repository for changes and copies them down. This is EXTREMELY IMPORTANT when working on a project with multiple people. If you do not do a pull before checking in code you can check in over someones changes and negatively impact your repository. Out of habit I always do a git pull (even on individual projects) before doing any coding. If anything, do a "git pull" before doing any commits and pushes. "git add [file]" and "git add *" allow you to stage the files you've made changes to for a commit to your local repository. This is important. Git creates a local repository for all of your changes as well as allowing you to have a remote repository to push changes to. "git add" and "git commit" are operations for your local repository. "git commit -m [message]" is a shorthand command for committing code that lets you write a commit comment and commit all in one line, otherwise it will open a vi screen and make you write your comment there. "git push -u origin [branch]" is how you push your changes from your local repository to your remote repository. We can talk about branching all day or you can read <a href="http://nvie.com/posts/a-successful-git-branching-model/">A Successful Git branching model</a> and determine how branching would be appropriate for your own project.</p>